# handlers/tracking.py

import datetime
import logging
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes
from database import Session
from models import DailyLog, User
from openai_utils import analyze_food_image, analyze_food_text
from handlers.common import build_system_prompt

logger = logging.getLogger(__name__)

async def start_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start_day ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ç—Ä–µ–∫–∏–Ω–≥–∞.
    """
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    session.close()

    if not user or 'daily_goals' not in user.user_info:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    ui = user.user_info
    h, w, a = ui['height'], ui['weight'], ui['age']
    g, goal = ui['gender'], ui['goal']
    dg = ui['daily_goals']
    calories, protein, fat, carbs = dg['calories'], dg['protein'], dg['fat'], dg['carbs']

    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = build_system_prompt(h, w, a, g, goal, calories, protein, fat, carbs)
    context.user_data['system_prompt'] = system_prompt
    context.user_data['daily_goals'] = dg

    today = datetime.date.today()
    context.user_data['date'] = today
    context.user_data['logs'] = []

    await update.message.reply_text(f"üìÖ –î–µ–Ω—å {today.strftime('%d.%m.%Y')} –Ω–∞—á–∞—Ç!")

async def end_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /end_day ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–µ–Ω—å –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    if 'date' not in context.user_data:
        await update.message.reply_text("‚ùó –î–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_day")
        return

    await update.message.reply_text(
        "‚úÖ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω! –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–∞ ‚Äî /analyze_period"
    )
    for key in ('date', 'logs', 'system_prompt', 'daily_goals'):
        context.user_data.pop(key, None)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –µ–¥—ã: –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    if 'date' not in context.user_data:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day")
        return

    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
    photo_file = await update.message.photo[-1].get_file()
    image_path = f"temp_{update.effective_user.id}.jpg"
    await photo_file.download_to_drive(image_path)

    sp = context.user_data['system_prompt']
    analysis = analyze_food_image(image_path, sp)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    session = Session()
    session.add(DailyLog(
        telegram_id=update.effective_user.id,
        date=context.user_data['date'],
        data={'type': 'meal', 'analysis': analysis}
    ))
    session.commit()
    session.close()

    context.user_data['logs'].append(analysis)
    logger.debug("Current logs: %s", context.user_data['logs'])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º plain text
    await update.message.reply_text(f"üçΩ –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:\n{analysis}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã: –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã–≤–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    if 'date' not in context.user_data:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day")
        return

    user_text = update.message.text
    await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    sp = context.user_data['system_prompt']
    analysis = analyze_food_text(user_text, sp)

    session = Session()
    session.add(DailyLog(
        telegram_id=update.effective_user.id,
        date=context.user_data['date'],
        data={'type': 'meal', 'text': user_text, 'analysis': analysis}
    ))
    session.commit()
    session.close()

    context.user_data['logs'].append(analysis)
    logger.debug("Current logs: %s", context.user_data['logs'])

    await update.message.reply_text(f"üçΩ –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:\n{analysis}")

def register_tracking_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    app.add_handler(CommandHandler('start_day', start_day))
    app.add_handler(CommandHandler('end_day', end_day))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

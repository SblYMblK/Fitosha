# handlers/tracking.py

import datetime
import logging
import re
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from database import Session
from models import DailyLog, User
from openai_utils import analyze_food_image, analyze_food_text, get_recommendations
from handlers.common import build_system_prompt
from handlers.history import handle_history, handle_analyze_period

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
MEAL_TYPE = 0
MEAL_PHOTO = 1
MEAL_TEXT = 2

MEAL_TYPES = ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω', '–ü–µ—Ä–µ–∫—É—Å', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']

def format_analysis_for_user(analysis: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    analysis_match = re.search(r'\[–ê–ù–ê–õ–ò–ó\](.*?)\[/–ê–ù–ê–õ–ò–ó\]', analysis, re.DOTALL)
    nutrients_match = re.search(r'\[–ù–£–¢–†–ò–ï–ù–¢–´\](.*?)\[/–ù–£–¢–†–ò–ï–ù–¢–´\]', analysis, re.DOTALL)
    calories_match = re.search(r'\[–ö–ê–õ–û–†–ò–ò\](.*?)\[/–ö–ê–õ–û–†–ò–ò\]', analysis, re.DOTALL)
    recommendations_match = re.search(r'\[–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\](.*?)\[/–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\]', analysis, re.DOTALL)

    parts = []
    
    if analysis_match:
        analysis_text = analysis_match.group(1).strip()
        parts.append(f"üìù *–ê–Ω–∞–ª–∏–∑:*\n{analysis_text}")
    
    if nutrients_match:
        nutrients_text = nutrients_match.group(1).strip()
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        nutrients_lines = nutrients_text.split('\n')
        formatted_nutrients = []
        for line in nutrients_lines:
            if '–ö–∞–ª–æ—Ä–∏–∏:' in line:
                formatted_nutrients.append(f"üî• {line.strip()}")
            elif '–ë–µ–ª–∫–∏:' in line:
                formatted_nutrients.append(f"ü•© {line.strip()}")
            elif '–ñ–∏—Ä—ã:' in line:
                formatted_nutrients.append(f"ü•ë {line.strip()}")
            elif '–£–≥–ª–µ–≤–æ–¥—ã:' in line:
                formatted_nutrients.append(f"üçö {line.strip()}")
            else:
                formatted_nutrients.append(line.strip())
        parts.append(f"üìä *–ù—É—Ç—Ä–∏–µ–Ω—Ç—ã:*\n" + "\n".join(formatted_nutrients))
    
    if calories_match:
        calories_text = calories_match.group(1).strip()
        if '–°–æ–∂–∂–µ–Ω–æ:' in calories_text:
            parts.append(f"üèÉ‚Äç‚ôÇÔ∏è *–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n{calories_text}")
    
    if recommendations_match:
        recommendations_text = recommendations_match.group(1).strip()
        parts.append(f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{recommendations_text}")
    
    return "\n\n".join(parts)

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"""
    keyboard = [
        [InlineKeyboardButton("üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏", callback_data='add_meal'),
         InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data='add_activity')],
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question'),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è", callback_data='day_stats')],
        [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", callback_data='end_day')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_meal_type_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    keyboard = [
        [InlineKeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", callback_data='meal_type_breakfast'),
         InlineKeyboardButton("üåû –û–±–µ–¥", callback_data='meal_type_lunch')],
        [InlineKeyboardButton("üåô –£–∂–∏–Ω", callback_data='meal_type_dinner'),
         InlineKeyboardButton("üçé –ü–µ—Ä–µ–∫—É—Å", callback_data='meal_type_snack')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_activity_input_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data='input_text')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_input_method_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='input_photo'),
         InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data='input_text')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_meal_type')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    user = session.query(User).filter_by(
        telegram_id=update.effective_user.id
    ).first()
    session.close()

    if not user or 'daily_goals' not in user.user_info:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    ui = user.user_info
    h, w, a = ui['height'], ui['weight'], ui['age']
    g, goal = ui['gender'], ui['goal']
    dg = ui['daily_goals']
    calories, protein, fat, carbs = (
        dg['calories'], dg['protein'], dg['fat'], dg['carbs']
    )

    system_prompt = build_system_prompt(
        h, w, a, g, goal, calories, protein, fat, carbs
    )
    context.user_data['system_prompt'] = system_prompt
    context.user_data['logs'] = []
    context.user_data['date'] = datetime.date.today()
    context.user_data['daily_totals'] = {
        'calories': 0,
        'protein': 0,
        'fat': 0,
        'carbs': 0,
        'burned': 0
    }
    context.user_data['daily_goals'] = dg

    await update.message.reply_text(
        f"üìÖ –î–µ–Ω—å {context.user_data['date'].strftime('%d.%m.%Y')} –Ω–∞—á–∞—Ç!\n\n"
        f"–í–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein}–≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {fat}–≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥",
        reply_markup=get_main_keyboard()
    )

async def end_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'date' not in context.user_data:
        message = update.message or update.callback_query.message
        await message.reply_text("‚ùó –î–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_day")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏—Ç–æ–≥–æ–≤
    message = update.message or update.callback_query.message
    progress_message = await message.reply_text(
        "üîÑ –§–∏—Ç–æ—à–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –¥–µ–Ω—å –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç...\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    totals = context.user_data.get('daily_totals', {})
    goals = context.user_data.get('daily_goals', {})
    logs = context.user_data.get('logs', [])
    
    net_calories = totals.get('calories', 0) - totals.get('burned', 0)
    goal_calories = goals.get('calories', 0)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    meals_breakdown = {
        '–ó–∞–≤—Ç—Ä–∞–∫': {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0, 'items': []},
        '–û–±–µ–¥': {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0, 'items': []},
        '–£–∂–∏–Ω': {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0, 'items': []},
        '–ü–µ—Ä–µ–∫—É—Å': {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0, 'items': []},
        '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': {'burned': 0, 'items': []}
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(logs)}")
    for log in logs:
        if '[–ê–ù–ê–õ–ò–ó]' in log:
            meal_type = None
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
            if isinstance(log, dict):
                meal_type = log.get('meal_type')
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Ç–∏–ø–∞ dict —Å meal_type: {meal_type}")
            else:
                # –ï—Å–ª–∏ –ª–æ–≥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∏—â–µ–º —Ç–∏–ø –≤ —Ç–µ–∫—Å—Ç–µ
                for type_name in meals_breakdown.keys():
                    if type_name in log:
                        meal_type = type_name
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Ç–∏–ø–∞ string —Å meal_type: {meal_type}")
                        break
            
            if not meal_type:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏: {log[:100]}...")
                continue

            if meal_type == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
                log_text = log if isinstance(log, str) else log.get('analysis', '')
                calories_match = re.search(r'–°–æ–∂–∂–µ–Ω–æ: (\d+)', log_text)
                if calories_match:
                    burned = int(calories_match.group(1))
                    meals_breakdown[meal_type]['burned'] += burned
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {burned} –∫–∫–∞–ª")
                    activity_desc = re.search(r'\[–ê–ù–ê–õ–ò–ó\](.*?)\[', log_text)
                    if activity_desc:
                        meals_breakdown[meal_type]['items'].append(activity_desc.group(1).strip())
            else:
                log_text = log if isinstance(log, str) else log.get('analysis', '')
                nutrients = extract_nutrients(log_text)
                if meal_type and nutrients:
                    meals_breakdown[meal_type]['calories'] += nutrients['calories']
                    meals_breakdown[meal_type]['protein'] += nutrients['protein']
                    meals_breakdown[meal_type]['fat'] += nutrients['fat']
                    meals_breakdown[meal_type]['carbs'] += nutrients['carbs']
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–µ–º –ø–∏—â–∏ {meal_type}: {nutrients}")
                    food_desc = re.search(r'\[–ê–ù–ê–õ–ò–ó\](.*?)\[', log_text)
                    if food_desc:
                        meals_breakdown[meal_type]['items'].append(food_desc.group(1).strip())
    
    logger.info("–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:")
    for meal_type, data in meals_breakdown.items():
        logger.info(f"{meal_type}: {data}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π
    calories_diff = net_calories - goal_calories
    protein_diff = totals.get('protein', 0) - goals.get('protein', 0)
    fat_diff = totals.get('fat', 0) - goals.get('fat', 0)
    carbs_diff = totals.get('carbs', 0) - goals.get('carbs', 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –¥–Ω—è
    if abs(calories_diff) <= 100:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 100 –∫–∫–∞–ª —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Ü–µ–ª–∏
        calories_status = "‚úÖ –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
    elif calories_diff > 0:
        calories_status = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ {calories_diff} –∫–∫–∞–ª"
    else:
        calories_status = f"‚ö†Ô∏è –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π –Ω–∞ {abs(calories_diff)} –∫–∫–∞–ª"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    summary_parts = [f"üìä *–ò—Ç–æ–≥–∏ –¥–Ω—è {context.user_data['date'].strftime('%d.%m.%Y')}*"]
    
    # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    summary_parts.append("\nüí´ *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*")
    summary_parts.append(f"‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('calories', 0)} –∫–∫–∞–ª")
    summary_parts.append(f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('burned', 0)} –∫–∫–∞–ª")
    summary_parts.append(f"‚Ä¢ –ò—Ç–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {net_calories} –∫–∫–∞–ª")
    summary_parts.append(f"‚Ä¢ –¶–µ–ª—å: {goal_calories} –∫–∫–∞–ª")
    summary_parts.append(f"‚Ä¢ {calories_status}")
    
    # –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
    summary_parts.append("\nüî¨ *–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:*")
    summary_parts.append(f"‚Ä¢ –ë–µ–ª–∫–∏: {totals.get('protein', 0)}–≥ / {goals.get('protein', 0)}–≥")
    summary_parts.append(f"‚Ä¢ –ñ–∏—Ä—ã: {totals.get('fat', 0)}–≥ / {goals.get('fat', 0)}–≥")
    summary_parts.append(f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {totals.get('carbs', 0)}–≥ / {goals.get('carbs', 0)}–≥")
    
    # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    meals_section = []
    has_meals = False
    for meal_type, data in meals_breakdown.items():
        if meal_type != '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
            if data['calories'] > 0:
                has_meals = True
                meals_section.append(f"\n*{meal_type}* ({data['calories']} –∫–∫–∞–ª):")
                meals_section.append(f"‚Ä¢ –ë: {data['protein']}–≥, –ñ: {data['fat']}–≥, –£: {data['carbs']}–≥")
                if data['items']:
                    meals_section.append("‚Ä¢ –°–æ—Å—Ç–∞–≤: " + ", ".join(data['items']))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if has_meals:
        summary_parts.append("\nüçΩ *–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:*")
        summary_parts.extend(meals_section)
    
    # –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if meals_breakdown['–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']['burned'] > 0:
        summary_parts.append("\nüèÉ‚Äç‚ôÇÔ∏è *–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*")
        summary_parts.append(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ: {meals_breakdown['–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']['burned']} –∫–∫–∞–ª")
        if meals_breakdown['–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']['items']:
            summary_parts.append("‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: " + "\n  ‚ñ´Ô∏è ".join([''] + meals_breakdown['–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']['items']))
    
    summary = "\n".join(summary_parts)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
    formatted_logs = []
    for log in context.user_data.get('logs', []):
        if isinstance(log, dict):
            formatted_logs.append(log.get('analysis', ''))
        else:
            formatted_logs.append(log)

    recommendations = await get_recommendations(
        context.user_data['system_prompt'],
        formatted_logs,
        summary
    )

    formatted_recommendations = format_analysis_for_user(recommendations)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è
    session = Session()
    session.add(DailyLog(
        telegram_id=update.effective_user.id,
        date=context.user_data['date'],
        time=datetime.datetime.now(),
        data={
            'type': 'day_end',
            'summary': summary,
            'recommendations': recommendations,
            'totals': totals,
            'goals': goals,
            'meals_breakdown': meals_breakdown
        }
    ))
    session.commit()
    session.close()

    message = update.message or update.callback_query.message
    await message.reply_text(
        f"{summary}\n\n"
        f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{formatted_recommendations}",
        parse_mode='Markdown',
        reply_markup=None
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
    context.user_data.clear()

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'add_meal':
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:",
            reply_markup=get_meal_type_keyboard()
        )
        return MEAL_TYPE
    elif query.data == 'add_activity':
        context.user_data['meal_type'] = '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
        context.user_data['expecting_text'] = True
        await query.message.edit_text(
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '30 –º–∏–Ω—É—Ç –±–µ–≥–∞' –∏–ª–∏ '1 —á–∞—Å –ø–ª–∞–≤–∞–Ω–∏—è')"
        )
        return MEAL_TEXT
    elif query.data.startswith('meal_type_'):
        meal_type = query.data.replace('meal_type_', '')
        meal_types = {
            'breakfast': '–ó–∞–≤—Ç—Ä–∞–∫',
            'lunch': '–û–±–µ–¥',
            'dinner': '–£–∂–∏–Ω',
            'snack': '–ü–µ—Ä–µ–∫—É—Å'
        }
        context.user_data['meal_type'] = meal_types[meal_type]
        await query.message.edit_text(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å?",
            reply_markup=get_input_method_keyboard()
        )
        return MEAL_PHOTO
    elif query.data.startswith('input_'):
        input_type = query.data.replace('input_', '')
        if input_type == 'photo':
            await query.message.edit_text(
                "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞"
            )
            context.user_data['expecting_photo'] = True
            return MEAL_PHOTO
        else:  # text
            await query.message.edit_text(
                "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º"
            )
            context.user_data['expecting_text'] = True
            return MEAL_TEXT
    elif query.data == 'back_to_main':
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    elif query.data == 'back_to_meal_type':
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:",
            reply_markup=get_meal_type_keyboard()
        )
        return MEAL_TYPE
    elif query.data == 'day_stats':
        await show_day_stats(update, context)
    elif query.data == 'ask_question':
        await query.message.edit_text(
            "üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å"
        )
        context.user_data['expecting_question'] = True
    elif query.data == 'start_day':
        await start_day(update, context)
    elif query.data == 'end_day':
        await end_day(update, context)
    elif query.data == 'get_advice':
        await get_current_advice(update, context)

async def get_current_advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å"""
    if 'date' not in context.user_data:
        await update.callback_query.message.reply_text(
            "‚ùó –î–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_day"
        )
        return

    await update.callback_query.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –¥–µ–Ω—å...")

    totals = context.user_data.get('daily_totals', {})
    goals = context.user_data.get('daily_goals', {})
    
    current_status = (
        f"–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {totals.get('calories', 0)}/{goals.get('calories', 0)} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {totals.get('protein', 0)}/{goals.get('protein', 0)}–≥\n"
        f"–ñ–∏—Ä—ã: {totals.get('fat', 0)}/{goals.get('fat', 0)}–≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {totals.get('carbs', 0)}/{goals.get('carbs', 0)}–≥\n"
        f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('burned', 0)} –∫–∫–∞–ª"
    )

    recommendations = await get_recommendations(
        context.user_data['system_prompt'],
        context.user_data['logs'],
        current_status
    )

    await update.callback_query.message.reply_text(
        f"üìä {current_status}\n\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}",
        reply_markup=get_main_keyboard()
    )

async def start_meal_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'date' not in context.user_data:
        message = update.message or update.callback_query.message
        await message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day")
        return ConversationHandler.END

    reply_keyboard = [[t] for t in MEAL_TYPES]
    message = update.message or update.callback_query.message
    await message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )
    return MEAL_TYPE

async def handle_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        meal_type = query.data.replace('meal_type_', '')
        meal_types = {
            'breakfast': '–ó–∞–≤—Ç—Ä–∞–∫',
            'lunch': '–û–±–µ–¥',
            'dinner': '–£–∂–∏–Ω',
            'snack': '–ü–µ—Ä–µ–∫—É—Å'
        }
        context.user_data['meal_type'] = meal_types[meal_type]
        await query.message.edit_text(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å?",
            reply_markup=get_input_method_keyboard()
        )
        return MEAL_PHOTO
    else:
        meal_type = update.message.text
        if meal_type not in MEAL_TYPES:
            await update.message.reply_text(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                reply_markup=get_meal_type_keyboard()
            )
            return MEAL_TYPE
        
        context.user_data['meal_type'] = meal_type
        
        if meal_type == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
            await update.message.reply_text(
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
                reply_markup=ReplyKeyboardRemove()
            )
            return MEAL_TEXT
        else:
            await update.message.reply_text(
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å?",
                reply_markup=get_input_method_keyboard()
            )
            return MEAL_PHOTO

async def handle_input_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'input_photo':
        await query.message.edit_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞"
        )
        context.user_data['expecting_photo'] = True
        return MEAL_PHOTO
    else:  # input_text
        await query.message.edit_text(
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º"
        )
        context.user_data['expecting_text'] = True
        return MEAL_TEXT

async def show_day_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
    if 'date' not in context.user_data:
        await update.callback_query.message.edit_text(
            "‚ùó –î–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_day",
            reply_markup=get_main_keyboard()
        )
        return

    totals = context.user_data.get('daily_totals', {})
    goals = context.user_data.get('daily_goals', {})
    
    net_calories = totals.get('calories', 0) - totals.get('burned', 0)
    goal_calories = goals.get('calories', 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    stats = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {context.user_data['date'].strftime('%d.%m.%Y')}:"]
    
    # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    stats.append("\nüí´ *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*")
    stats.append(f"‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('calories', 0)} –∫–∫–∞–ª")
    stats.append(f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('burned', 0)} –∫–∫–∞–ª")
    stats.append(f"‚Ä¢ –ò—Ç–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {net_calories} –∫–∫–∞–ª")
    stats.append(f"‚Ä¢ –¶–µ–ª—å: {goal_calories} –∫–∫–∞–ª")
    
    # –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
    stats.append("\nüî¨ *–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:*")
    stats.append(f"‚Ä¢ –ë–µ–ª–∫–∏: {totals.get('protein', 0)}–≥ / {goals.get('protein', 0)}–≥")
    stats.append(f"‚Ä¢ –ñ–∏—Ä—ã: {totals.get('fat', 0)}–≥ / {goals.get('fat', 0)}–≥")
    stats.append(f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {totals.get('carbs', 0)}–≥ / {goals.get('carbs', 0)}–≥")

    await update.callback_query.message.edit_text(
        "\n".join(stats),
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

def clear_conversation_state(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    keys_to_clear = ['meal_type', 'expecting_photo', 'expecting_text', 'expecting_question']
    for key in keys_to_clear:
        if key in context.user_data:
            del context.user_data[key]

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id)
    
    if 'date' not in context.user_data:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –Ω–∞—á–∞–ª–∞ –¥–Ω—è", update.effective_user.id)
        await update.message.reply_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    if 'meal_type' not in context.user_data:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏", update.effective_user.id)
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    progress_message = await update.message.reply_text(
        "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        photo_url = photo_file.file_path
        
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (—Ç–∏–ø: %s)", 
                   update.effective_user.id, context.user_data.get('meal_type'))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
        analysis = await analyze_food_image(
            photo_url,
            context.user_data['system_prompt'],
            [log.get('analysis', log) if isinstance(log, dict) else log for log in context.user_data.get('logs', [])],
            update.message.caption
        )
        
        logger.info("–ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        nutrients = extract_nutrients(analysis)
        update_daily_totals(context.user_data['daily_totals'], nutrients)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        session = Session()
        log_entry = DailyLog(
            telegram_id=update.effective_user.id,
            date=context.user_data['date'],
            time=datetime.datetime.now(),
            data={
                'type': 'meal',
                'meal_type': context.user_data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏'),
                'analysis': analysis,
                'nutrients': nutrients,
                'photo_url': photo_url
            }
        )
        session.add(log_entry)
        session.commit()
        session.close()
        
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è
        if 'logs' not in context.user_data:
            context.user_data['logs'] = []
        context.user_data['logs'].append({
            'type': 'meal',
            'meal_type': context.user_data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏'),
            'analysis': analysis
        })
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await progress_message.delete()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        formatted_analysis = format_analysis_for_user(analysis)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n{formatted_analysis}",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
        logger.info("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        return ConversationHandler.END
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", 
                    update.effective_user.id, str(e), exc_info=True)
        await progress_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return MEAL_PHOTO
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        clear_conversation_state(context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –µ–¥—ã –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if 'expecting_text' not in context.user_data and 'expecting_question' not in context.user_data:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    progress_message = await update.message.reply_text(
        "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø–∏—Å—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    try:
        if 'expecting_question' in context.user_data:
            del context.user_data['expecting_question']
            await handle_open_query(update, context, progress_message)
            return ConversationHandler.END

        del context.user_data['expecting_text']
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        analysis = await analyze_food_text(
            update.message.text,
            context.user_data['system_prompt'],
            [log.get('analysis', log) if isinstance(log, dict) else log for log in context.user_data.get('logs', [])]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if context.user_data.get('meal_type') == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
            calories_burned = extract_calories_burned(analysis)
            if calories_burned > 0:
                context.user_data['daily_totals']['burned'] = \
                    context.user_data['daily_totals'].get('burned', 0) + calories_burned
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–æ–∂–∂–µ–Ω–æ {calories_burned} –∫–∫–∞–ª")
        else:
            nutrients = extract_nutrients(analysis)
            update_daily_totals(context.user_data['daily_totals'], nutrients)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–µ–º –ø–∏—â–∏ {context.user_data.get('meal_type')}: {nutrients}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        session = Session()
        log_entry = DailyLog(
            telegram_id=update.effective_user.id,
            date=context.user_data['date'],
            time=datetime.datetime.now(),
            data={
                'type': 'activity' if context.user_data.get('meal_type') == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' else 'meal',
                'meal_type': context.user_data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏'),
                'text': update.message.text,
                'analysis': analysis,
                'calories_burned': calories_burned if context.user_data.get('meal_type') == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' else 0
            }
        )
        session.add(log_entry)
        session.commit()
        session.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è
        if 'logs' not in context.user_data:
            context.user_data['logs'] = []
        context.user_data['logs'].append({
            'type': 'activity' if context.user_data.get('meal_type') == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' else 'meal',
            'meal_type': context.user_data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏'),
            'analysis': analysis,
            'calories_burned': calories_burned if context.user_data.get('meal_type') == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' else 0
        })
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await progress_message.delete()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        formatted_analysis = format_analysis_for_user(analysis)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
        if context.user_data.get('meal_type') == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
            header = "üèÉ‚Äç‚ôÇÔ∏è *–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!*"
        else:
            header = f"‚úÖ *{context.user_data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏')} –¥–æ–±–∞–≤–ª–µ–Ω!*"
        
        await update.message.reply_text(
            f"{header}\n\n{formatted_analysis}",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        return ConversationHandler.END
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: %s", e)
        await progress_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return MEAL_TEXT
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        clear_conversation_state(context)

async def handle_open_query(update: Update, context: ContextTypes.DEFAULT_TYPE, progress_message=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if 'date' not in context.user_data:
        if progress_message:
            await progress_message.delete()
        await update.message.reply_text(
            "‚ùó –î–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_day",
            reply_markup=get_main_keyboard()
        )
        return

    if not progress_message:
        progress_message = await update.message.reply_text(
            "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

    try:
        user_query = update.message.text
        system_prompt = context.user_data['system_prompt']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        totals = context.user_data.get('daily_totals', {})
        goals = context.user_data.get('daily_goals', {})
        
        net_calories = totals.get('calories', 0) - totals.get('burned', 0)
        remaining_calories = goals.get('calories', 0) - net_calories
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        context_info = (
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('calories', 0)} –∫–∫–∞–ª\n"
            f"- –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {totals.get('burned', 0)} –∫–∫–∞–ª\n"
            f"- –û—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π: {remaining_calories} –∫–∫–∞–ª\n"
            f"- –ë–µ–ª–∫–∏: {totals.get('protein', 0)}–≥ / {goals.get('protein', 0)}–≥\n"
            f"- –ñ–∏—Ä—ã: {totals.get('fat', 0)}–≥ / {goals.get('fat', 0)}–≥\n"
            f"- –£–≥–ª–µ–≤–æ–¥—ã: {totals.get('carbs', 0)}–≥ / {goals.get('carbs', 0)}–≥\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        formatted_logs = []
        for log in context.user_data.get('logs', []):
            if isinstance(log, dict):
                formatted_logs.append(log.get('analysis', ''))
            else:
                formatted_logs.append(log)

        recommendations = await get_recommendations(
            system_prompt,
            formatted_logs,
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_info}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}"
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_analysis_for_user(recommendations)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
        session = Session()
        log_entry = DailyLog(
            telegram_id=update.effective_user.id,
            date=context.user_data['date'],
            time=datetime.datetime.now(),
            data={
                'type': 'query',
                'query': user_query,
                'response': recommendations
            }
        )
        session.add(log_entry)
        session.commit()
        session.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è
        if 'logs' not in context.user_data:
            context.user_data['logs'] = []
        context.user_data['logs'].append(f"–í–æ–ø—Ä–æ—Å: {user_query}\n–û—Ç–≤–µ—Ç: {recommendations}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        if progress_message:
            await progress_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if formatted_response:
            await update.message.reply_text(
                f"üí° *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n{formatted_response}",
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            await update.message.reply_text(
                f"üí° *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n{recommendations}",
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", e)
        if progress_message:
            await progress_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

def extract_nutrients(analysis: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏
        start = analysis.find('[–ù–£–¢–†–ò–ï–ù–¢–´]')
        end = analysis.find('[/–ù–£–¢–†–ò–ï–ù–¢–´]')
        if start == -1 or end == -1:
            return {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0}
        
        nutrients_text = analysis[start:end]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        nutrients = {
            'calories': 0,
            'protein': 0,
            'fat': 0,
            'carbs': 0
        }
        
        for line in nutrients_text.split('\n'):
            line = line.strip()
            if '–ö–∞–ª–æ—Ä–∏–∏:' in line:
                nutrients['calories'] = int(line.split(':')[1].replace('–∫–∫–∞–ª', '').strip())
            elif '–ë–µ–ª–∫–∏:' in line:
                nutrients['protein'] = int(line.split(':')[1].replace('–≥', '').strip())
            elif '–ñ–∏—Ä—ã:' in line:
                nutrients['fat'] = int(line.split(':')[1].replace('–≥', '').strip())
            elif '–£–≥–ª–µ–≤–æ–¥—ã:' in line:
                nutrients['carbs'] = int(line.split(':')[1].replace('–≥', '').strip())
        
        return nutrients
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: %s", e)
        return {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0}

def extract_calories_burned(analysis: str) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –∫–∞–ª–æ—Ä–∏—è–º–∏
        start = analysis.find('[–ö–ê–õ–û–†–ò–ò]')
        end = analysis.find('[/–ö–ê–õ–û–†–ò–ò]')
        if start == -1 or end == -1:
            return 0
        
        calories_text = analysis[start:end]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        for line in calories_text.split('\n'):
            line = line.strip()
            if '–°–æ–∂–∂–µ–Ω–æ:' in line:
                calories = int(line.split(':')[1].replace('–∫–∫–∞–ª', '').strip())
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {calories}")
                return calories
        
        return 0
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: %s", e)
        return 0

def update_daily_totals(totals: dict, nutrients: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    for key in ('calories', 'protein', 'fat', 'carbs'):
        totals[key] = totals.get(key, 0) + nutrients.get(key, 0)
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏: {totals}")

def register_tracking_handlers(app):
    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    conv_meal = ConversationHandler(
        entry_points=[
            CommandHandler('log', start_meal_log),
            CallbackQueryHandler(handle_callback, pattern='^add_meal$')
        ],
        states={
            MEAL_TYPE: [
                CallbackQueryHandler(handle_callback, pattern='^meal_type_'),
                CallbackQueryHandler(handle_callback, pattern='^back_to_main$')
            ],
            MEAL_PHOTO: [
                MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo),
                CallbackQueryHandler(handle_callback, pattern='^input_'),
                CallbackQueryHandler(handle_callback, pattern='^back_to_meal_type$')
            ],
            MEAL_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                CallbackQueryHandler(handle_callback, pattern='^input_'),
                CallbackQueryHandler(handle_callback, pattern='^back_to_meal_type$')
            ]
        },
        fallbacks=[
            CommandHandler('cancel', lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^cancel$'),
            CallbackQueryHandler(handle_callback, pattern='^back_to_main$')
        ],
        per_user=True,
        name="meal_conversation"
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    conv_activity = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_callback, pattern='^add_activity$')
        ],
        states={
            MEAL_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                CallbackQueryHandler(handle_callback, pattern='^back_to_main$')
            ]
        },
        fallbacks=[
            CommandHandler('cancel', lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^cancel$'),
            CallbackQueryHandler(handle_callback, pattern='^back_to_main$')
        ],
        per_user=True,
        name="activity_conversation"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    app.add_handler(CommandHandler('start_day', start_day))
    app.add_handler(CommandHandler('end_day', end_day))
    app.add_handler(CommandHandler('history', handle_history))
    app.add_handler(CommandHandler('analyze_period', handle_analyze_period))
    app.add_handler(conv_meal)      # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º –ø–∏—â–∏
    app.add_handler(conv_activity)  # –ü–æ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    app.add_handler(CallbackQueryHandler(handle_callback, pattern='^(day_stats|ask_question|start_day|end_day|get_advice)$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_open_query))

# handlers/history.py

import datetime
from telegram import Update
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from database import Session
from models import DailyLog
from openai_utils import summarize_daily_intake

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
HISTORY_DATE = 0
ANALYZE_START, ANALYZE_END = range(2)

async def history_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.05.2025) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return HISTORY_DATE

async def history_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        date = datetime.datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑ (–î–î.MM.–ì–ì–ì–ì) –∏–ª–∏ /cancel."
        )
        return HISTORY_DATE

    session = Session()
    logs = session.query(DailyLog).filter_by(
        telegram_id=update.effective_user.id,
        date=date
    ).all()
    session.close()

    if not logs:
        await update.message.reply_text(f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date.strftime('%d.%m.%Y')}.")
    else:
        parts = []
        for idx, log in enumerate(logs, 1):
            data = log.data
            # –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –µ–¥—ã
            if data.get("analysis"):
                parts.append(f"{idx}. {data['analysis']}")
        report = "\n\n".join(parts)
        await update.message.reply_text(
            f"üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {date.strftime('%d.%m.%Y')}:\n\n{report}"
        )

    return ConversationHandler.END

async def analyze_period_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ (–î–î.MM.–ì–ì–ì–ì) –∏–ª–∏ /cancel."
    )
    return ANALYZE_START

async def analyze_period_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        start_date = datetime.datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑ (–î–î.MM.–ì–ì–ì–ì)."
        )
        return ANALYZE_START

    context.user_data['analyze_start'] = start_date
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ (–î–î.MM.–ì–ì–ì–ì).")
    return ANALYZE_END

async def analyze_period_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        end_date = datetime.datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑ (–î–î.MM.–ì–ì–ì–ì)."
        )
        return ANALYZE_END

    start_date = context.user_data.get('analyze_start')
    if end_date < start_date:
        await update.message.reply_text(
            "‚ùó –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ."
        )
        return ANALYZE_END

    session = Session()
    logs = session.query(DailyLog).filter(
        DailyLog.telegram_id == update.effective_user.id,
        DailyLog.date >= start_date,
        DailyLog.date <= end_date
    ).all()
    session.close()

    if not logs:
        await update.message.reply_text(
            f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')}‚Äì{end_date.strftime('%d.%m.%Y')}."
        )
        return ConversationHandler.END

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM
    analyses = [log.data.get("analysis") for log in logs if log.data.get("analysis")]
    summary = summarize_daily_intake(analyses)

    await update.message.reply_text(
        f"üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')}‚Äì"
        f"{end_date.strftime('%d.%m.%Y')}:\n\n{summary}"
    )
    return ConversationHandler.END

async def cancel_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.")
    return ConversationHandler.END

def register_history_handlers(app):
    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è /history
    conv_hist = ConversationHandler(
        entry_points=[CommandHandler('history', history_start)],
        states={
            HISTORY_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, history_date)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_history)],
        per_user=True,
    )
    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è /analyze_period
    conv_an = ConversationHandler(
        entry_points=[CommandHandler('analyze_period', analyze_period_start)],
        states={
            ANALYZE_START: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_period_start_date)
            ],
            ANALYZE_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_period_end_date)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_history)],
        per_user=True,
    )
    app.add_handler(conv_hist)
    app.add_handler(conv_an)

# handlers/history.py

import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from database import Session
from models import DailyLog, User
from openai_utils import summarize_daily_intake
import calendar
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
HISTORY_DATE = 0
ANALYZE_START, ANALYZE_END = range(2)

logger = logging.getLogger(__name__)

def get_calendar_keyboard(year: int, month: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = calendar.month_name[month]
    keyboard.append([
        InlineKeyboardButton(f"‚óÄÔ∏è", callback_data=f'calendar_prev_{year}_{month}'),
        InlineKeyboardButton(f"{month_name} {year}", callback_data='ignore'),
        InlineKeyboardButton(f"‚ñ∂Ô∏è", callback_data=f'calendar_next_{year}_{month}')
    ])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data='ignore') for day in days])
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data='ignore'))
            else:
                row.append(InlineKeyboardButton(
                    str(day),
                    callback_data=f'date_{year}_{month}_{day}'
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_history')])
    
    return InlineKeyboardMarkup(keyboard)

async def history_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    today = datetime.date.today()
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:",
        reply_markup=get_calendar_keyboard(today.year, today.month)
    )
    return HISTORY_DATE

async def handle_calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'cancel_history':
        await query.message.edit_text("‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω")
        return ConversationHandler.END
    
    if query.data.startswith('calendar_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        _, direction, year, month = query.data.split('_')
        year, month = int(year), int(month)
        
        if direction == 'prev':
            if month == 1:
                month = 12
                year -= 1
            else:
                month -= 1
        else:  # next
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
        
        await query.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:",
            reply_markup=get_calendar_keyboard(year, month)
        )
        return HISTORY_DATE
    
    if query.data.startswith('date_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        _, year, month, day = query.data.split('_')
        date = datetime.date(int(year), int(month), int(day))
        
        session = Session()
        logs = session.query(DailyLog).filter_by(
            telegram_id=update.effective_user.id,
            date=date
        ).order_by(DailyLog.time).all()
        session.close()

        if not logs:
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data='back_to_calendar')]]
            await query.message.edit_text(
                f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date.strftime('%d.%m.%Y')}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return HISTORY_DATE

        parts = []
        daily_summary = None
        
        for log in logs:
            data = log.data
            time_str = log.time.strftime('%H:%M')
            
            if data['type'] == 'summary':
                daily_summary = data
                continue
                
            if data['type'] == 'meal':
                meal_type = data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                nutrients = data.get('nutrients', {})
                parts.append(
                    f"üïê {time_str} - {meal_type}\n"
                    f"–°–æ—Å—Ç–∞–≤: {data['analysis']}\n"
                    f"–ö–∞–ª–æ—Ä–∏–∏: {nutrients.get('calories', 0)} –∫–∫–∞–ª\n"
                    f"–ë–µ–ª–∫–∏: {nutrients.get('protein', 0)}–≥\n"
                    f"–ñ–∏—Ä—ã: {nutrients.get('fat', 0)}–≥\n"
                    f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrients.get('carbs', 0)}–≥\n"
                )
            elif data['type'] == 'activity':
                parts.append(
                    f"üïê {time_str} - –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                    f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
                    f"–ê–Ω–∞–ª–∏–∑: {data['analysis']}\n"
                    f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {data.get('calories_burned', 0)} –∫–∫–∞–ª\n"
                )
            elif data['type'] == 'query':
                parts.append(
                    f"üïê {time_str} - –ó–∞–ø—Ä–æ—Å –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n"
                    f"–í–æ–ø—Ä–æ—Å: {data['query']}\n"
                    f"–û—Ç–≤–µ—Ç: {data['response']}\n"
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if daily_summary:
            parts.append("\n" + daily_summary['summary'])
        
        report = "\n\n".join(parts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", 
                    callback_data=f'date_{(date - datetime.timedelta(days=1)).strftime("%Y_%m_%d")}'),
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚ñ∂Ô∏è", 
                    callback_data=f'date_{(date + datetime.timedelta(days=1)).strftime("%Y_%m_%d")}')
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data='back_to_calendar')]
        ]
        
        await query.message.edit_text(
            f"üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {date.strftime('%d.%m.%Y')}:\n\n{report}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return HISTORY_DATE
    
    if query.data == 'back_to_calendar':
        today = datetime.date.today()
        await query.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:",
            reply_markup=get_calendar_keyboard(today.year, today.month)
        )
        return HISTORY_DATE

async def analyze_period_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    today = datetime.date.today()
    context.user_data['analyze_period'] = {}
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:",
        reply_markup=get_calendar_keyboard(today.year, today.month)
    )
    return ANALYZE_START

async def handle_analyze_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'cancel_history':
        await query.message.edit_text("‚ùå –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        return ConversationHandler.END
    
    if query.data.startswith('calendar_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        _, direction, year, month = query.data.split('_')
        year, month = int(year), int(month)
        
        if direction == 'prev':
            if month == 1:
                month = 12
                year -= 1
            else:
                month -= 1
        else:  # next
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
        
        message = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ "
        message += "–Ω–∞—á–∞–ª—å–Ω—É—é" if context.user_data['analyze_period'].get('start_date') is None else "–∫–æ–Ω–µ—á–Ω—É—é"
        message += " –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:"
        
        await query.message.edit_text(
            message,
            reply_markup=get_calendar_keyboard(year, month)
        )
        return ANALYZE_START if context.user_data['analyze_period'].get('start_date') is None else ANALYZE_END
    
    if query.data.startswith('date_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        _, year, month, day = query.data.split('_')
        selected_date = datetime.date(int(year), int(month), int(day))
        
        if context.user_data['analyze_period'].get('start_date') is None:
            # –í—ã–±—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            context.user_data['analyze_period']['start_date'] = selected_date
            await query.message.edit_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:",
                reply_markup=get_calendar_keyboard(selected_date.year, selected_date.month)
            )
            return ANALYZE_END
        else:
            # –í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            start_date = context.user_data['analyze_period']['start_date']
            if selected_date < start_date:
                await query.message.edit_text(
                    "‚ùó –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                    reply_markup=get_calendar_keyboard(selected_date.year, selected_date.month)
                )
                return ANALYZE_END
            
            session = Session()
            logs = session.query(DailyLog).filter(
                DailyLog.telegram_id == update.effective_user.id,
                DailyLog.date >= start_date,
                DailyLog.date <= selected_date,
                DailyLog.data['type'].astext == 'summary'  # –¢–æ–ª—å–∫–æ –∏—Ç–æ–≥–∏ –¥–Ω–µ–π
            ).order_by(DailyLog.date).all()
            session.close()

            if not logs:
                await query.message.edit_text(
                    f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')}‚Äì{selected_date.strftime('%d.%m.%Y')}.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data='restart_analysis')
                    ]])
                )
                return ANALYZE_START

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
            total_calories = 0
            total_burned = 0
            total_protein = 0
            total_fat = 0
            total_carbs = 0
            days_count = 0

            for log in logs:
                days_count += 1
                totals = log.data.get('totals', {})
                total_calories += totals.get('calories', 0)
                total_burned += totals.get('burned', 0)
                total_protein += totals.get('protein', 0)
                total_fat += totals.get('fat', 0)
                total_carbs += totals.get('carbs', 0)

            # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_calories = total_calories / days_count if days_count > 0 else 0
            avg_burned = total_burned / days_count if days_count > 0 else 0
            avg_protein = total_protein / days_count if days_count > 0 else 0
            avg_fat = total_fat / days_count if days_count > 0 else 0
            avg_carbs = total_carbs / days_count if days_count > 0 else 0

            summary = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')}‚Äì{selected_date.strftime('%d.%m.%Y')}\n"
                f"–í—Å–µ–≥–æ –¥–Ω–µ–π: {days_count}\n\n"
                f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å:\n"
                f"üçΩ –ö–∞–ª–æ—Ä–∏–∏: {avg_calories:.1f} –∫–∫–∞–ª\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –°–æ–∂–∂–µ–Ω–æ: {avg_burned:.1f} –∫–∫–∞–ª\n"
                f"üìä –ù–µ—Ç—Ç–æ –∫–∞–ª–æ—Ä–∏–π: {(avg_calories - avg_burned):.1f} –∫–∫–∞–ª\n"
                f"ü•© –ë–µ–ª–∫–∏: {avg_protein:.1f}–≥\n"
                f"ü•ë –ñ–∏—Ä—ã: {avg_fat:.1f}–≥\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {avg_carbs:.1f}–≥\n\n"
                f"üìä –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:\n"
                f"üçΩ –ö–∞–ª–æ—Ä–∏–∏: {total_calories} –∫–∫–∞–ª\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –°–æ–∂–∂–µ–Ω–æ: {total_burned} –∫–∫–∞–ª\n"
                f"üìä –ù–µ—Ç—Ç–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories - total_burned} –∫–∫–∞–ª\n"
                f"ü•© –ë–µ–ª–∫–∏: {total_protein}–≥\n"
                f"ü•ë –ñ–∏—Ä—ã: {total_fat}–≥\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs}–≥"
            )

            keyboard = [[InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data='restart_analysis')]]
            await query.message.edit_text(
                summary,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ANALYZE_START
    
    if query.data == 'restart_analysis':
        context.user_data['analyze_period'] = {}
        today = datetime.date.today()
        await query.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:",
            reply_markup=get_calendar_keyboard(today.year, today.month)
        )
        return ANALYZE_START

async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    progress_message = await update.message.reply_text(
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
        session = Session()
        logs = session.query(DailyLog).filter(
            DailyLog.telegram_id == update.effective_user.id
        ).order_by(DailyLog.date.desc()).limit(7).all()
        session.close()

        if not logs:
            await progress_message.edit_text(
                "üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!"
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
        days = {}
        for log in logs:
            date_str = log.date.strftime('%d.%m.%Y')
            if date_str not in days:
                days[date_str] = []
            days[date_str].append(log)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_parts = []
        for date_str, day_logs in days.items():
            day_parts = [f"\nüìÖ *{date_str}*"]
            
            for log in day_logs:
                data = log.data
                time_str = log.time.strftime('%H:%M')
                
                if data['type'] == 'meal':
                    meal_type = data.get('meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                    nutrients = data.get('nutrients', {})
                    if nutrients:
                        day_parts.append(
                            f"üïê {time_str} - {meal_type}\n"
                            f"–°–æ—Å—Ç–∞–≤: {data.get('text', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏: {nutrients.get('calories', 0)} –∫–∫–∞–ª\n"
                            f"–ë–µ–ª–∫–∏: {nutrients.get('protein', 0)}–≥\n"
                            f"–ñ–∏—Ä—ã: {nutrients.get('fat', 0)}–≥\n"
                            f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrients.get('carbs', 0)}–≥"
                        )
                elif data['type'] == 'activity':
                    day_parts.append(
                        f"üïê {time_str} - –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('text', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                        f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {data.get('calories_burned', 0)} –∫–∫–∞–ª"
                    )

            report_parts.append("\n\n".join(day_parts))

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await progress_message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        full_report = "\n\n".join(report_parts)
        await update.message.reply_text(
            f"üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n{full_report}",
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: %s", str(e), exc_info=True)
        await progress_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_analyze_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze_period"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    progress_message = await update.message.reply_text(
        "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        session = Session()
        logs = session.query(DailyLog).filter(
            DailyLog.telegram_id == update.effective_user.id,
            DailyLog.date >= datetime.date.today() - datetime.timedelta(days=7)
        ).order_by(DailyLog.date.asc()).all()
        session.close()

        if not logs:
            await progress_message.edit_text(
                "üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!"
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        days_data = {}
        for log in logs:
            date_str = log.date.strftime('%d.%m.%Y')
            if date_str not in days_data:
                days_data[date_str] = {
                    'calories': 0,
                    'protein': 0,
                    'fat': 0,
                    'carbs': 0,
                    'burned': 0
                }
            
            data = log.data
            if data['type'] == 'meal' and 'nutrients' in data:
                nutrients = data['nutrients']
                days_data[date_str]['calories'] += nutrients.get('calories', 0)
                days_data[date_str]['protein'] += nutrients.get('protein', 0)
                days_data[date_str]['fat'] += nutrients.get('fat', 0)
                days_data[date_str]['carbs'] += nutrients.get('carbs', 0)
            elif data['type'] == 'activity':
                days_data[date_str]['burned'] += data.get('calories_burned', 0)

        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total_days = len(days_data)
        avg_data = {
            'calories': sum(d['calories'] for d in days_data.values()) / total_days,
            'burned': sum(d['burned'] for d in days_data.values()) / total_days,
            'protein': sum(d['protein'] for d in days_data.values()) / total_days,
            'fat': sum(d['fat'] for d in days_data.values()) / total_days,
            'carbs': sum(d['carbs'] for d in days_data.values()) / total_days
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        goals = user.user_info.get('daily_goals', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üìä *–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {total_days} –¥–Ω–µ–π:*\n\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å:\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {int(avg_data['calories'])} –∫–∫–∞–ª"
        )
        
        if goals.get('calories'):
            diff = int(goals['calories'] - (avg_data['calories'] - avg_data['burned']))
            report += f" (—Ü–µ–ª—å: {goals['calories']} –∫–∫–∞–ª, {'+' if diff < 0 else '-'}{abs(diff)} –∫–∫–∞–ª)"
        
        report += (
            f"\n‚Ä¢ –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {int(avg_data['burned'])} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {int(avg_data['protein'])}–≥"
        )
        
        if goals.get('protein'):
            diff = int(goals['protein'] - avg_data['protein'])
            report += f" (—Ü–µ–ª—å: {goals['protein']}–≥, {'+' if diff < 0 else '-'}{abs(diff)}–≥)"
            
        report += f"\n‚Ä¢ –ñ–∏—Ä—ã: {int(avg_data['fat'])}–≥"
        if goals.get('fat'):
            diff = int(goals['fat'] - avg_data['fat'])
            report += f" (—Ü–µ–ª—å: {goals['fat']}–≥, {'+' if diff < 0 else '-'}{abs(diff)}–≥)"
            
        report += f"\n‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {int(avg_data['carbs'])}–≥"
        if goals.get('carbs'):
            diff = int(goals['carbs'] - avg_data['carbs'])
            report += f" (—Ü–µ–ª—å: {goals['carbs']}–≥, {'+' if diff < 0 else '-'}{abs(diff)}–≥)"

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await progress_message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await update.message.reply_text(
            report,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä–∏–æ–¥–∞: %s", str(e), exc_info=True)
        await progress_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_history_handlers(app):
    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
    conv_hist = ConversationHandler(
        entry_points=[CommandHandler('history', history_start)],
        states={
            HISTORY_DATE: [
                CallbackQueryHandler(handle_calendar_callback, pattern='^(date_|calendar_|back_to_calendar|cancel_history)')
            ]
        },
        fallbacks=[
            CommandHandler('cancel', lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^cancel$')
        ],
        per_message=True,
        per_user=True
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–∞
    conv_analyze = ConversationHandler(
        entry_points=[CommandHandler('analyze_period', analyze_period_start)],
        states={
            ANALYZE_START: [
                CallbackQueryHandler(handle_analyze_calendar, pattern='^(date_|calendar_|restart_analysis|cancel_history)')
            ],
            ANALYZE_END: [
                CallbackQueryHandler(handle_analyze_calendar, pattern='^(date_|calendar_|restart_analysis|cancel_history)')
            ]
        },
        fallbacks=[
            CommandHandler('cancel', lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^cancel$')
        ],
        per_message=True,
        per_user=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    app.add_handler(conv_hist)
    app.add_handler(conv_analyze)

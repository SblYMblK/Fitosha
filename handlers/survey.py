# handlers/survey.py

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from database import Session
from models import User
from handlers.common import calculate_daily_goals, build_system_prompt

# –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞
ASK_READY, ASK_HEIGHT, ASK_WEIGHT, ASK_AGE, ASK_GENDER, ASK_GOAL = range(6)

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Entry point –¥–ª—è –æ–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—å.
    """
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    session.close()

    if user and user.user_info.get('system_prompt'):
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å. "
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day."
        )
        return ConversationHandler.END

    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )
    return ASK_READY

async def ready_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text != '–¥–∞':
        await update.message.reply_text("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
        return ConversationHandler.END

    await update.message.reply_text("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç? (–≤ —Å–º)")
    return ASK_HEIGHT

async def ask_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç
    context.user_data['height'] = update.message.text
    await update.message.reply_text("‚öñÔ∏è –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å? (–≤ –∫–≥)")
    return ASK_WEIGHT

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weight'] = update.message.text
    await update.message.reply_text("üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return ASK_AGE

async def ask_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['age'] = update.message.text
    reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
    await update.message.reply_text(
        "üöª –¢–≤–æ–π –ø–æ–ª?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )
    return ASK_GENDER

async def ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['gender'] = update.message.text
    reply_keyboard = [['–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å']]
    await update.message.reply_text(
        "üéØ –ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )
    return ASK_GOAL

async def save_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å
    context.user_data['goal'] = update.message.text

    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã
    h = context.user_data['height']
    w = context.user_data['weight']
    a = context.user_data['age']
    g = context.user_data['gender']
    goal = context.user_data['goal']
    calories, protein, fat, carbs = calculate_daily_goals(h, w, a, g, goal)
    system_prompt = build_system_prompt(h, w, a, g, goal, calories, protein, fat, carbs)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user:
        user = User(telegram_id=update.effective_user.id, user_info={})
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user.user_info.update(context.user_data)
    user.user_info['daily_goals'] = {
        'calories': calories,
        'protein': protein,
        'fat': fat,
        'carbs': carbs,
    }
    user.user_info['system_prompt'] = system_prompt
    session.add(user)
    session.commit()
    session.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥, –ñ–∏—Ä—ã: {fat} –≥, –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏ —Å–≤–æ–π –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day"
    )
    return ConversationHandler.END

async def cancel_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
    return ConversationHandler.END

def register_survey_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start_survey)],
        states={
            ASK_READY:   [MessageHandler(filters.Regex('^(–î–∞|–ù–µ—Ç)$'), ready_response)],
            ASK_HEIGHT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_weight)],
            ASK_WEIGHT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_gender)],
            ASK_GENDER:  [MessageHandler(filters.Regex('^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), ask_goal)],
            ASK_GOAL:    [MessageHandler(filters.Regex('^(–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å|–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É|–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å)$'), save_survey)],
        },
        fallbacks=[CommandHandler('cancel', cancel_survey)],
        per_user=True,
    )
    app.add_handler(conv)

# handlers/survey.py

import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from database import Session
from models import User
from handlers.common import calculate_daily_goals, build_system_prompt

# –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞
ASK_READY, ASK_HEIGHT, ASK_WEIGHT, ASK_AGE, ASK_GENDER, ASK_ACTIVITY_LEVEL, ASK_TRAINING_EXPERIENCE, ASK_GOAL = range(8)

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Entry point –¥–ª—è –æ–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—å.
    """
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    session.close()

    if user and user.user_info.get('system_prompt'):
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å. "
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start_day."
        )
        return ConversationHandler.END

    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –§–∏—Ç–æ—à–∞ ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π! üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "üéØ –î–æ—Å—Ç–∏—á—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞\n"
        "üí™ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üèÉ‚Äç‚ôÇÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏\n\n"
        "–ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è? üòä",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )
    return ASK_READY

async def ready_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text != '–¥–∞':
        await update.message.reply_text(
            "–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç? (–≤ —Å–º)",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_HEIGHT

async def validate_number(text: str, min_value: float, max_value: float) -> tuple[bool, float]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    try:
        value = float(text)
        if min_value <= value <= max_value:
            return True, value
        return False, value
    except ValueError:
        return False, 0.0

async def ask_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Ç–∞ (–æ—Ç 100 –¥–æ 250 —Å–º)
    is_valid, height = await validate_number(update.message.text, 100, 250)
    if not is_valid:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 100 –¥–æ 250).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 175"
        )
        return ASK_HEIGHT

    context.user_data['height'] = height
    await update.message.reply_text("‚öñÔ∏è –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å? (–≤ –∫–≥)")
    return ASK_WEIGHT

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Å–∞ (–æ—Ç 30 –¥–æ 250 –∫–≥)
    is_valid, weight = await validate_number(update.message.text, 30, 250)
    if not is_valid:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 30 –¥–æ 250).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 70"
        )
        return ASK_WEIGHT

    context.user_data['weight'] = weight
    await update.message.reply_text("üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return ASK_AGE

async def ask_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ—Ç 14 –¥–æ 100 –ª–µ—Ç)
    is_valid, age = await validate_number(update.message.text, 14, 100)
    if not is_valid:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 14 –¥–æ 100).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
        )
        return ASK_AGE

    context.user_data['age'] = age
    reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
    await update.message.reply_text(
        "üöª –¢–≤–æ–π –ø–æ–ª?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return ASK_GENDER

async def ask_activity_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text
    if gender not in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(
                [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']],
                one_time_keyboard=True,
                resize_keyboard=True
            ),
        )
        return ASK_GENDER

    context.user_data['gender'] = gender
    reply_keyboard = [
        ['–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'],
        ['–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)'],
        ['–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)'],
        ['–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)'],
        ['–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω']
    ]
    await update.message.reply_text(
        "üèÉ‚Äç‚ôÇÔ∏è –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return ASK_ACTIVITY_LEVEL

async def ask_training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity_level = update.message.text
    valid_activity_levels = {
        '–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
        '–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)',
        '–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)',
        '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω'
    }
    
    if activity_level not in valid_activity_levels:
        reply_keyboard = [
            ['–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'],
            ['–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)'],
            ['–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)'],
            ['–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)'],
            ['–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω']
        ]
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            ),
        )
        return ASK_ACTIVITY_LEVEL

    context.user_data['activity_level'] = activity_level
    reply_keyboard = [['–ù–æ–≤–∏—á–æ–∫'], ['–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å'], ['–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π']]
    await update.message.reply_text(
        "üí™ –ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return ASK_TRAINING_EXPERIENCE

async def ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    training_exp = update.message.text
    valid_experience_levels = {'–ù–æ–≤–∏—á–æ–∫', '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
    
    if training_exp not in valid_experience_levels:
        reply_keyboard = [['–ù–æ–≤–∏—á–æ–∫'], ['–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å'], ['–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π']]
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            ),
        )
        return ASK_TRAINING_EXPERIENCE

    context.user_data['training_experience'] = training_exp
    reply_keyboard = [['–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å']]
    await update.message.reply_text(
        "üéØ –ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return ASK_GOAL

async def save_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text
    valid_goals = {'–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å'}
    
    if goal not in valid_goals:
        reply_keyboard = [['–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å']]
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            ),
        )
        return ASK_GOAL

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å
    context.user_data['goal'] = goal

    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    h = context.user_data['height']
    w = context.user_data['weight']
    a = context.user_data['age']
    g = context.user_data['gender']
    goal = context.user_data['goal']
    activity_level = context.user_data['activity_level']
    training_exp = context.user_data['training_experience']

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ –±–∞–∑–æ–≤–æ–º—É –æ–±–º–µ–Ω—É
    activity_multipliers = {
        '–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏': 1.2,
        '–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)': 1.375,
        '–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)': 1.55,
        '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)': 1.725,
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω': 1.9
    }
    activity_multiplier = activity_multipliers.get(activity_level, 1.2)

    calories, protein, fat, carbs = calculate_daily_goals(h, w, a, g, goal, activity_multiplier)
    system_prompt = build_system_prompt(h, w, a, g, goal, calories, protein, fat, carbs, 
                                      activity_level, training_exp)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user:
        user = User(telegram_id=update.effective_user.id, user_info={})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user.user_info.update(context.user_data)
    user.user_info['daily_goals'] = {
        'calories': calories,
        'protein': protein,
        'fat': fat,
        'carbs': carbs,
    }
    user.user_info['system_prompt'] = system_prompt
    session.add(user)
    session.commit()
    session.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    goal_messages = {
        '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å': (
            "üéØ –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø–ª–∞–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞. "
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞."
        ),
        '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É': (
            "üéØ –°—É–¥—è –ø–æ –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–∞–º, –¥–ª—è –Ω–∞–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã "
            "—è —Ä–∞—Å—Å—á–∏—Ç–∞–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±–µ–ª–æ–∫."
        ),
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å': (
            "üéØ –ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —è –ø–æ–¥–æ–±—Ä–∞–ª —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, "
            "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å –∏ —É–ª—É—á—à–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ç–µ–ª–∞."
        )
    }

    goal_message = goal_messages.get(goal, "")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –Ø, –§–∏—Ç–æ—à–∞, –±—É–¥—É –≤–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏.\n\n"
        f"{goal_message}\n\n"
        f"üìä –í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein}–≥ (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞ –º—ã—à—Ü)\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {fat}–≥ (–¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥ (–¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏)\n\n"
        f"üí™ –í–º–µ—Å—Ç–µ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –≤–∞—à–µ–π —Ü–µ–ª–∏! "
        f"–ù–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_day —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å! üöÄ",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def cancel_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start.",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    return ConversationHandler.END

def register_survey_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start_survey)],
        states={
            ASK_READY:   [MessageHandler(filters.Regex('^(–î–∞|–ù–µ—Ç)$'), ready_response)],
            ASK_HEIGHT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_weight)],
            ASK_WEIGHT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_gender)],
            ASK_GENDER:  [MessageHandler(filters.Regex('^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), ask_activity_level)],
            ASK_ACTIVITY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_training_experience)],
            ASK_TRAINING_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goal)],
            ASK_GOAL:    [MessageHandler(filters.Regex('^(–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å|–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É|–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å)$'), save_survey)],
        },
        fallbacks=[CommandHandler('cancel', cancel_survey)],
        per_user=True,
    )
    app.add_handler(conv)
